
package is.hbv401g.tripPlanner.view;

import is.hbv401g.flight.Flight;
import is.hbv401g.hotel.Hotel;
import is.hbv401g.tripPlanner.model.Booking;
import is.hbv401g.tripPlanner.controller.BookingDatabase;
import is.hbv401g.tripPlanner.model.BookingManager;
import is.hbv401g.tripPlanner.controller.DayTourSearch;
import is.hbv401g.tripPlanner.controller.FlightSearch;
import is.hbv401g.tripPlanner.controller.HotelSearch;
import is.hbv401g.tripPlanner.controller.Validate;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import is.hbv401g.dayTour.model.Tours;


/**
 * Lýsing
 * @author 6T_Trip_planner group
 *     
 * 
 */

/**
 * Window shows user interface for meta-search engine.
 * @author  6T_Trip_planner group
 */
public class Window extends javax.swing.JFrame {

    BookingManager bookingManager = new BookingManager();
    FlightSearch flightSearch = new FlightSearch();
    FlightSearch flightSearchArr = new FlightSearch();
    HotelSearch hotelSearch = new HotelSearch();
    DayTourSearch dayTourSearch = new DayTourSearch();
    Validate validate = new Validate();
    BookingDatabase bookingDatabase = new BookingDatabase();
    int numberOfbooking = 0;
        
    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        compoundPainter1 = new org.jdesktop.swingx.painter.CompoundPainter();
        mainTabbedPane = new javax.swing.JTabbedPane();
        flightsPanel = new javax.swing.JPanel();
        bookFlightButtonGreenMessageLabel = new javax.swing.JLabel();
        bookFlightButtonMessageLabel = new javax.swing.JLabel();
        jArrFlightMessageLabel = new javax.swing.JLabel();
        jDepFlightMessageLabel = new javax.swing.JLabel();
        numberOfTicketsComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        fromFlightComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        toFlightComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        depFlightDatePicker = new org.jdesktop.swingx.JXDatePicker();
        arrFlightDatePicker = new org.jdesktop.swingx.JXDatePicker();
        oneWayCheckBox = new javax.swing.JCheckBox();
        flightSearchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jdepFlightResultTable = new javax.swing.JTable();
        nextFromFlightButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jDepFlightTableScrollPane = new javax.swing.JScrollPane();
        jArrFlightResultTable = new javax.swing.JTable();
        jDepTableLabel = new javax.swing.JLabel();
        jArrTableLabel = new javax.swing.JLabel();
        bookFlightButton = new javax.swing.JButton();
        hotelsPanel = new javax.swing.JPanel();
        jHotelTableMessageLabel = new javax.swing.JLabel();
        bookHotelButtonMessageLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        locationHotelComboBox = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        roomHotelComboBox = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        adultsHotelComboBox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        checkinHotelDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel10 = new javax.swing.JLabel();
        checkoutHotelDatePicker = new org.jdesktop.swingx.JXDatePicker();
        hotelSearchButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        hotelResultTable = new javax.swing.JTable();
        nextFromHotelButton = new javax.swing.JButton();
        bookHotelButton = new javax.swing.JButton();
        wifiCheckBox1 = new javax.swing.JCheckBox();
        freewifiCheckBox = new javax.swing.JCheckBox();
        smokeCheckBox = new javax.swing.JCheckBox();
        spoolCheckBox = new javax.swing.JCheckBox();
        gymCheckBox = new javax.swing.JCheckBox();
        tvCheckBox = new javax.swing.JCheckBox();
        bookHotelButtonGreenMessageLabel = new javax.swing.JLabel();
        roomType = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        dayTourPanel = new javax.swing.JPanel();
        jArrFlightMessageLabel1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        areaTourComboBox = new javax.swing.JComboBox<>();
        ticketsTourComboBox = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        dayTourSearchButton = new javax.swing.JButton();
        dayTourDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        dayTourResultsTable = new javax.swing.JTable();
        nextFromDayTourButton = new javax.swing.JButton();
        typeTourComboBox = new javax.swing.JComboBox<>();
        languageCombobox = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        pickupCheckBox = new javax.swing.JCheckBox();
        handicapCheckbox = new javax.swing.JCheckBox();
        bookTourButton = new javax.swing.JButton();
        difficultyComboBox = new javax.swing.JComboBox<>();
        jLabel23 = new javax.swing.JLabel();
        jBookDayTourMessageLabel = new javax.swing.JLabel();
        jBookDayTourGreenMessageLabel = new javax.swing.JLabel();
        customerPanel = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        nextFromCustomerButton = new javax.swing.JButton();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        fieldForgotLabel = new javax.swing.JLabel();
        bookPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        finalBookingButton = new javax.swing.JButton();
        bookingMessageLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                mainTabbedPaneStateChanged(evt);
            }
        });

        flightsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bookFlightButtonGreenMessageLabel.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        bookFlightButtonGreenMessageLabel.setForeground(new java.awt.Color(0, 153, 102));
        bookFlightButtonGreenMessageLabel.setPreferredSize(new java.awt.Dimension(53, 16));
        flightsPanel.add(bookFlightButtonGreenMessageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 610, 220, 30));

        bookFlightButtonMessageLabel.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        bookFlightButtonMessageLabel.setPreferredSize(new java.awt.Dimension(53, 16));
        flightsPanel.add(bookFlightButtonMessageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 610, 220, 30));

        jArrFlightMessageLabel.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jArrFlightMessageLabel.setPreferredSize(new java.awt.Dimension(53, 16));
        flightsPanel.add(jArrFlightMessageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 400, 600, -1));

        jDepFlightMessageLabel.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jDepFlightMessageLabel.setPreferredSize(new java.awt.Dimension(53, 16));
        flightsPanel.add(jDepFlightMessageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 190, 600, -1));

        numberOfTicketsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9" }));
        flightsPanel.add(numberOfTicketsComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 60, 70, -1));

        jLabel1.setText("From");
        flightsPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        fromFlightComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Akureyri", "Reykjavík", "Ísafjörður", "Eigilsstaðir" }));
        flightsPanel.add(fromFlightComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 120, -1));

        jLabel2.setText("To");
        flightsPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, -1, -1));

        toFlightComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Akureyri", "Reykjavík", "Ísafjörður", "Eigilsstaðir" }));
        flightsPanel.add(toFlightComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, 120, -1));

        jLabel3.setText("Departure");
        flightsPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        jLabel4.setText("Arrival");
        flightsPanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 120, -1, -1));

        depFlightDatePicker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                depFlightDatePickerPropertyChange(evt);
            }
        });
        flightsPanel.add(depFlightDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));
        flightsPanel.add(arrFlightDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 140, -1, -1));

        oneWayCheckBox.setText("One Way");
        oneWayCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneWayCheckBoxActionPerformed(evt);
            }
        });
        flightsPanel.add(oneWayCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 140, -1, -1));

        flightSearchButton.setText("Search");
        flightSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flightSearchButtonActionPerformed(evt);
            }
        });
        flightsPanel.add(flightSearchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 140, -1, -1));

        jdepFlightResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Airline", "Departure", "Time", "Arrival", "Time", "Duration", "Ticket(s)", "Total Price", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jdepFlightResultTable);

        flightsPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 810, 180));

        nextFromFlightButton.setText("Next >");
        nextFromFlightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextFromFlightButtonActionPerformed(evt);
            }
        });
        flightsPanel.add(nextFromFlightButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 610, -1, -1));

        jLabel16.setText("Number of tickets");
        flightsPanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, -1, -1));

        jArrFlightResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Airline", "Departure", "Time", "Arrival", "Time", "Duration", "Ticket(s)", "Total Price", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jDepFlightTableScrollPane.setViewportView(jArrFlightResultTable);

        flightsPanel.add(jDepFlightTableScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 420, 810, 180));

        jDepTableLabel.setText("Departure:");
        flightsPanel.add(jDepTableLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        jArrTableLabel.setText("Arrival:");
        flightsPanel.add(jArrTableLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 400, -1, -1));

        bookFlightButton.setText("Add to booking");
        bookFlightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookFlightButtonActionPerformed(evt);
            }
        });
        flightsPanel.add(bookFlightButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, -1, -1));

        mainTabbedPane.addTab("Flights", flightsPanel);

        hotelsPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jHotelTableMessageLabel.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jHotelTableMessageLabel.setPreferredSize(new java.awt.Dimension(53, 16));
        hotelsPanel.add(jHotelTableMessageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 600, -1));

        bookHotelButtonMessageLabel.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        bookHotelButtonMessageLabel.setPreferredSize(new java.awt.Dimension(53, 16));
        hotelsPanel.add(bookHotelButtonMessageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 610, 220, 30));

        jLabel5.setText("City");
        hotelsPanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        locationHotelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Reykjavík", "Hafnarfjörður", "Kópavogur", "Hella", "Fáskrúðsfjörður" }));
        hotelsPanel.add(locationHotelComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        jLabel6.setText("Room");
        hotelsPanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, -1, -1));

        roomHotelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));
        hotelsPanel.add(roomHotelComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 60, -1, -1));

        jLabel7.setText("Adults");
        hotelsPanel.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, -1, -1));

        adultsHotelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));
        hotelsPanel.add(adultsHotelComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 60, -1, -1));

        jLabel9.setText("Check in");
        hotelsPanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        checkinHotelDatePicker.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                checkinHotelDatePickerPropertyChange(evt);
            }
        });
        hotelsPanel.add(checkinHotelDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        jLabel10.setText("Check out");
        hotelsPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 120, -1, -1));
        hotelsPanel.add(checkoutHotelDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 140, -1, -1));

        hotelSearchButton.setText("Search");
        hotelSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hotelSearchButtonActionPerformed(evt);
            }
        });
        hotelsPanel.add(hotelSearchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 140, -1, -1));

        hotelResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Address", "Postcode", "City", "Wifi", "Free Wifi", "Smoke", "S.Pool", "Gym", "Tv", "Price", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(hotelResultTable);

        hotelsPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 810, 350));

        nextFromHotelButton.setText("Next >");
        nextFromHotelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextFromHotelButtonActionPerformed(evt);
            }
        });
        hotelsPanel.add(nextFromHotelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 610, -1, -1));

        bookHotelButton.setText("Add to booking");
        bookHotelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookHotelButtonActionPerformed(evt);
            }
        });
        hotelsPanel.add(bookHotelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 610, -1, -1));

        wifiCheckBox1.setText("Wifi");
        hotelsPanel.add(wifiCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 20, -1, -1));

        freewifiCheckBox.setText("FreeWifi");
        hotelsPanel.add(freewifiCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 20, -1, -1));

        smokeCheckBox.setText("Smoke");
        hotelsPanel.add(smokeCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 20, -1, -1));

        spoolCheckBox.setText("Swimming pool");
        hotelsPanel.add(spoolCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 60, -1, -1));

        gymCheckBox.setText("Gym");
        hotelsPanel.add(gymCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 20, -1, -1));

        tvCheckBox.setText("Tv");
        hotelsPanel.add(tvCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 60, -1, -1));

        bookHotelButtonGreenMessageLabel.setFont(new java.awt.Font("Lucida Bright", 2, 13)); // NOI18N
        bookHotelButtonGreenMessageLabel.setForeground(new java.awt.Color(0, 153, 102));
        bookHotelButtonGreenMessageLabel.setMaximumSize(new java.awt.Dimension(53, 16));
        bookHotelButtonGreenMessageLabel.setPreferredSize(new java.awt.Dimension(53, 16));
        hotelsPanel.add(bookHotelButtonGreenMessageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(173, 606, 200, 40));

        roomType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));
        hotelsPanel.add(roomType, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 140, -1, -1));

        jLabel8.setText("Room type");
        hotelsPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 120, -1, -1));

        mainTabbedPane.addTab("Hotels", hotelsPanel);

        dayTourPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jArrFlightMessageLabel1.setFont(new java.awt.Font("Lucida Grande", 2, 13)); // NOI18N
        jArrFlightMessageLabel1.setPreferredSize(new java.awt.Dimension(53, 16));
        dayTourPanel.add(jArrFlightMessageLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, 600, -1));

        jLabel11.setText("Area");
        dayTourPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        areaTourComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Capital region", "East", "North", "South", "West" }));
        dayTourPanel.add(areaTourComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        ticketsTourComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));
        dayTourPanel.add(ticketsTourComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 60, -1, -1));

        jLabel12.setText("Tickets");
        dayTourPanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 40, -1, -1));

        dayTourSearchButton.setText("Search");
        dayTourSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dayTourSearchButtonActionPerformed(evt);
            }
        });
        dayTourPanel.add(dayTourSearchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 140, -1, -1));
        dayTourPanel.add(dayTourDatePicker, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 140, -1, -1));

        jLabel14.setText("Date");
        dayTourPanel.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, -1, -1));

        jLabel15.setText("Type");
        dayTourPanel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, -1, -1));

        dayTourResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Area", "Type", "Duration", "Language", "Difficulty", "Pickup", "Handicap", "Tickets", "Price", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dayTourResultsTable.setColumnSelectionAllowed(true);
        jScrollPane3.setViewportView(dayTourResultsTable);

        dayTourPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 210, 810, 350));

        nextFromDayTourButton.setText("Next >");
        nextFromDayTourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextFromDayTourButtonActionPerformed(evt);
            }
        });
        dayTourPanel.add(nextFromDayTourButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 610, -1, -1));

        typeTourComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Adventure", "City walk", "Horse riding", "Hiking", "Sight seeing" }));
        dayTourPanel.add(typeTourComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 60, 130, -1));

        languageCombobox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Danish", "English", "German", "Icelandic", "Spanish" }));
        dayTourPanel.add(languageCombobox, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 60, -1, -1));

        jLabel13.setText("Language");
        dayTourPanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, -1, -1));

        pickupCheckBox.setText("Pickup");
        dayTourPanel.add(pickupCheckBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 140, -1, -1));

        handicapCheckbox.setText("Handicap");
        dayTourPanel.add(handicapCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 140, -1, -1));

        bookTourButton.setText("Add to booking");
        bookTourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookTourButtonActionPerformed(evt);
            }
        });
        dayTourPanel.add(bookTourButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 610, -1, -1));

        difficultyComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose", "Easy", "Medium", "Hard" }));
        dayTourPanel.add(difficultyComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 60, -1, -1));

        jLabel23.setText("Difficulty");
        dayTourPanel.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 40, -1, -1));
        dayTourPanel.add(jBookDayTourMessageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 610, 140, 30));

        jBookDayTourGreenMessageLabel.setFont(new java.awt.Font("Lucida Bright", 2, 13)); // NOI18N
        jBookDayTourGreenMessageLabel.setForeground(new java.awt.Color(0, 153, 102));
        dayTourPanel.add(jBookDayTourGreenMessageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 604, 120, 40));

        mainTabbedPane.addTab("DayTours", dayTourPanel);

        customerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel17.setText("Name");
        customerPanel.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));
        customerPanel.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 150, -1));

        jLabel18.setText("SSN");
        customerPanel.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));
        customerPanel.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 150, -1));

        jLabel19.setText("Phone");
        customerPanel.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 180, -1, -1));
        customerPanel.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 200, 110, -1));

        nextFromCustomerButton.setText("Next >");
        nextFromCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextFromCustomerButtonActionPerformed(evt);
            }
        });
        customerPanel.add(nextFromCustomerButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 590, -1, -1));

        jLabel20.setForeground(new java.awt.Color(255, 0, 51));
        jLabel20.setText("Invalid Name");
        customerPanel.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, -1, -1));

        jLabel21.setForeground(new java.awt.Color(255, 0, 51));
        jLabel21.setText("Invalid SSN");
        customerPanel.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 130, -1, -1));

        jLabel22.setForeground(new java.awt.Color(255, 0, 51));
        jLabel22.setText("Invalid Phone");
        customerPanel.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 200, -1, -1));

        fieldForgotLabel.setForeground(new java.awt.Color(255, 0, 51));
        fieldForgotLabel.setText("Please fill out customer fields");
        customerPanel.add(fieldForgotLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        mainTabbedPane.addTab("Customer", customerPanel);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        finalBookingButton.setText("Book");
        finalBookingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalBookingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bookPanelLayout = new javax.swing.GroupLayout(bookPanel);
        bookPanel.setLayout(bookPanelLayout);
        bookPanelLayout.setHorizontalGroup(
            bookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 834, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookPanelLayout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(bookingMessageLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(finalBookingButton)))
                .addContainerGap())
        );
        bookPanelLayout.setVerticalGroup(
            bookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(bookPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(finalBookingButton))
                    .addGroup(bookPanelLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(bookingMessageLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)))
                .addGap(30, 30, 30))
        );

        mainTabbedPane.addTab("Booking  0", bookPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainTabbedPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainTabbedPane)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Event handler when user clicks search button in flight tab. Search and 
     * message display for user if no results were found or if user doesn't 
     * pick a date.
     * 
     * @param evt 
     */
    private void flightSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flightSearchButtonActionPerformed
        if(!validateFlights()) return;
        
        ArrayList<Flight> results = flightSearch.search(depFlightDatePicker.getDate(), fromFlightComboBox.getSelectedItem().toString(), 
                toFlightComboBox.getSelectedItem().toString(), Integer.parseInt(numberOfTicketsComboBox.getItemAt(numberOfTicketsComboBox.getSelectedIndex())) );       
        
        if(!results.isEmpty())
            createFlightTable(results, jdepFlightResultTable);
        else 
            jDepFlightMessageLabel.setText("No flights from "+ fromFlightComboBox.getSelectedItem()+
                " to "+ toFlightComboBox.getSelectedItem()+" on "+ depFlightDatePicker.getDate().toString().substring(0, 10)+" found");
      
        if (!oneWayCheckBox.isSelected() ){            
            ArrayList<Flight> resultsArr = flightSearchArr.search(arrFlightDatePicker.getDate(), toFlightComboBox.getSelectedItem().toString(), 
                    fromFlightComboBox.getSelectedItem().toString(), Integer.parseInt(numberOfTicketsComboBox.getItemAt(numberOfTicketsComboBox.getSelectedIndex())));
            
            if(!resultsArr.isEmpty()) {
                createFlightTable(resultsArr, jArrFlightResultTable);
            }
            else jArrFlightMessageLabel.setText("No flights from "+ toFlightComboBox.getSelectedItem() +
                " to "+ fromFlightComboBox.getSelectedItem()+ " on "+ arrFlightDatePicker.getDate().toString().substring(0, 10)+" found");
        }
        
    }//GEN-LAST:event_flightSearchButtonActionPerformed
    /**
     * Event handler for One Way checkbox in flight tab 
     * @param evt 
     */
    private void oneWayCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneWayCheckBoxActionPerformed
        oneWay();
    }//GEN-LAST:event_oneWayCheckBoxActionPerformed
    /**
     * Event handler for next button in flight tab
     * @param evt 
     */
    private void nextFromFlightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextFromFlightButtonActionPerformed
        showPanel(hotelsPanel);
    }//GEN-LAST:event_nextFromFlightButtonActionPerformed
    /**
     * Event handler when user clicks search button in hotel tab. Search and 
     * message display for user if no results were found or if user doesn't 
     * pick a date.
     * 
     * @param evt 
     */
    private void hotelSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hotelSearchButtonActionPerformed

        Date datein = checkinHotelDatePicker.getDate();
        Date dateout = checkoutHotelDatePicker.getDate();
        
        String rooms = roomHotelComboBox.getSelectedItem().toString();
        String city = locationHotelComboBox.getSelectedItem().toString();
    
        Boolean wifi = wifiCheckBox1.isSelected();
        Boolean freewifi = freewifiCheckBox.isSelected();
        Boolean smoke = smokeCheckBox.isSelected();
        Boolean spool = spoolCheckBox.isSelected();     
        Boolean gym = gymCheckBox.isSelected();
        Boolean tv = tvCheckBox.isSelected();
        
        if (city.equals("Fáskrúðsfjörður")) city = "Fáskrúðsfirði";
        if (city.equals("Reykjavík")) city = "Reykjavik";
        
        if(!validateHotels()) return;
        bookHotelButton.setEnabled(true);
        
        ArrayList<Hotel> results = hotelSearch.search(datein, dateout, rooms , city, wifi, freewifi, smoke, spool, gym, tv);
        createHotelTable(results);
        
        System.out.println(daysBetween(datein,dateout));
    }//GEN-LAST:event_hotelSearchButtonActionPerformed
    /**
     * Event handler for next button in hotel tab
     * @param evt 
     */
    private void nextFromHotelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextFromHotelButtonActionPerformed
        showPanel(dayTourPanel);
    }//GEN-LAST:event_nextFromHotelButtonActionPerformed
    /**
     * Event handler when user clicks search button in Day Tour tab. 
     * 
     * @param evt 
     */
    private void dayTourSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dayTourSearchButtonActionPerformed
        //if(!validateDayTours()) return;
        Date date = dayTourDatePicker.getDate();       
        String area = areaTourComboBox.getSelectedItem().toString();       
        String type = typeTourComboBox.getSelectedItem().toString();
        String diff = difficultyComboBox.getSelectedItem().toString();
        boolean pickup = pickupCheckBox.isSelected();
        boolean hcap = handicapCheckbox.isSelected();
        String lang = languageCombobox.getSelectedItem().toString();
        int tickets = Integer.parseInt(ticketsTourComboBox.getItemAt(ticketsTourComboBox.getSelectedIndex()));        
        
        if(("Choose").equals(area)) area = "";
        if(("Choose").equals(type)) type = "";
        if(("Choose").equals(diff)) diff = "";        
        if(("Choose").equals(lang)) lang = "";      
             
        ArrayList<Tours> results = dayTourSearch.search(date, area, type, diff, pickup, hcap, lang, tickets);
        
        createDayTourTable(results);
    }//GEN-LAST:event_dayTourSearchButtonActionPerformed
    /**
     * Event handler for next button in day tour tab
     * @param evt 
     */
    private void nextFromDayTourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextFromDayTourButtonActionPerformed
        showPanel(customerPanel);
    }//GEN-LAST:event_nextFromDayTourButtonActionPerformed
    /**
     * Event handler for next button in customer tab
     * @param evt 
     */
    private void nextFromCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextFromCustomerButtonActionPerformed
        addCustomer();
    }//GEN-LAST:event_nextFromCustomerButtonActionPerformed
    /**
     * Event handler for Booking tab (when user clicks booking tab)
     * @param evt 
     */
    private void mainTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_mainTabbedPaneStateChanged
        if(mainTabbedPane.getSelectedIndex()==4)
            showBooking();
    }//GEN-LAST:event_mainTabbedPaneStateChanged
    /**
     * Event handler for final booking button in booking tab
     * @param evt 
     */
    private void finalBookingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalBookingButtonActionPerformed
        Booking booking = bookingManager.getBookings();
        bookingMessageLabel1.setText("Successful booking. Thank you " + booking.customer.getName()+ " and have a pleasant trip. " ); 
        for(int i=0; i<5; i++){
            mainTabbedPane.setEnabledAt(i, false);
        }
        finalBookingButton.setEnabled(false);
        addBookingToDatabase();
        updateFlightDatabase();
        updateToursDatabase();
        updateHotelDatabase();
     
    }//GEN-LAST:event_finalBookingButtonActionPerformed
    /**
     * Event handler for add to booking button  in flight tab
     * @param evt 
     */
    private void bookFlightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookFlightButtonActionPerformed
        if (!oneWayCheckBox.isSelected()){
            if(!isRowSelected(jdepFlightResultTable) && !isRowSelected(jArrFlightResultTable)){
                bookFlightButtonMessageLabel.setText("No flights selected");
                return;
            }           
            else if (!isRowSelected(jdepFlightResultTable)){
                bookFlightButtonMessageLabel.setText("No departure flight selected");
            }            
            else if (!isRowSelected(jArrFlightResultTable)){
                bookFlightButtonMessageLabel.setText("No arrival flight selected");
            }
            else if(isRowSelected(jdepFlightResultTable) && isRowSelected(jArrFlightResultTable)){
                bookFlightButtonMessageLabel.setText("");
                bookFlightButtonGreenMessageLabel.setText("Flight added");
                addSelectedFlights(jdepFlightResultTable, flightSearch);
                addSelectedFlights(jArrFlightResultTable, flightSearchArr);
                increaseBookNumber(1);
                bookFlightButton.setEnabled(false);
            }                     
        }
        
        if (oneWayCheckBox.isSelected()){
            if (isRowSelected(jdepFlightResultTable)){
                bookFlightButtonMessageLabel.setText("");
                bookFlightButtonGreenMessageLabel.setText("Flight added");
                addSelectedFlights(jdepFlightResultTable, flightSearch);
                increaseBookNumber(1);
                bookFlightButton.setEnabled(false);
            }
            else bookFlightButtonMessageLabel.setText("No departure flight selected");
        }
    }//GEN-LAST:event_bookFlightButtonActionPerformed
    /**
     * Event handler for add to booking button in hotel tab
     * @param evt 
     */
    private void bookHotelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookHotelButtonActionPerformed
        if(!isRowSelected(hotelResultTable)){
            bookHotelButtonMessageLabel.setText("No hotel selected");
            return;
        }
        else if(isRowSelected(hotelResultTable)){
            bookHotelButtonMessageLabel.setText("");
            bookHotelButtonGreenMessageLabel.setText("Hotel added");
            addSelectedHotel(hotelResultTable, hotelSearch);
            bookHotelButton.setEnabled(false);
        }
        increaseBookNumber(1);
        
    }//GEN-LAST:event_bookHotelButtonActionPerformed
    /**
     * Event handler for add to booking button in day tour tab
     * @param evt 
     */
    private void bookTourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookTourButtonActionPerformed
        if(!isRowSelected(dayTourResultsTable)){
            jBookDayTourMessageLabel.setText("No DayTour selected");
            return;
        }
        else if(isRowSelected(dayTourResultsTable)){ 
            jBookDayTourMessageLabel.setText("");
            jBookDayTourGreenMessageLabel.setText("DayTour added");
            addSelectedDayTours(dayTourResultsTable, dayTourSearch);
        }

        increaseBookNumber(1);
        bookTourButton.setEnabled(false);
        
    }//GEN-LAST:event_bookTourButtonActionPerformed
    /**
     * Event handler for initializing the date pickers in flight
     * @param evt 
     */
    private void depFlightDatePickerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_depFlightDatePickerPropertyChange
        if(depFlightDatePicker.getDate() != null){
            arrFlightDatePicker.getMonthView().setLowerBound(depFlightDatePicker.getDate());
            arrFlightDatePicker.setDate(depFlightDatePicker.getDate());
        }   
    }//GEN-LAST:event_depFlightDatePickerPropertyChange
    /**
     * Event handler for initializing the date pickers in hotel
     * @param evt 
     */
    private void checkinHotelDatePickerPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_checkinHotelDatePickerPropertyChange
        if(checkinHotelDatePicker.getDate() != null){
            checkoutHotelDatePicker.getMonthView().setLowerBound(checkinHotelDatePicker.getDate());
            checkoutHotelDatePicker.setDate(checkinHotelDatePicker.getDate());
        }
    }//GEN-LAST:event_checkinHotelDatePickerPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> adultsHotelComboBox;
    private javax.swing.JComboBox<String> areaTourComboBox;
    private org.jdesktop.swingx.JXDatePicker arrFlightDatePicker;
    private javax.swing.JButton bookFlightButton;
    private javax.swing.JLabel bookFlightButtonGreenMessageLabel;
    private javax.swing.JLabel bookFlightButtonMessageLabel;
    private javax.swing.JButton bookHotelButton;
    private javax.swing.JLabel bookHotelButtonGreenMessageLabel;
    private javax.swing.JLabel bookHotelButtonMessageLabel;
    private javax.swing.JPanel bookPanel;
    private javax.swing.JButton bookTourButton;
    private javax.swing.JLabel bookingMessageLabel1;
    private org.jdesktop.swingx.JXDatePicker checkinHotelDatePicker;
    private org.jdesktop.swingx.JXDatePicker checkoutHotelDatePicker;
    private org.jdesktop.swingx.painter.CompoundPainter compoundPainter1;
    private javax.swing.JPanel customerPanel;
    private org.jdesktop.swingx.JXDatePicker dayTourDatePicker;
    private javax.swing.JPanel dayTourPanel;
    private javax.swing.JTable dayTourResultsTable;
    private javax.swing.JButton dayTourSearchButton;
    private org.jdesktop.swingx.JXDatePicker depFlightDatePicker;
    private javax.swing.JComboBox<String> difficultyComboBox;
    private javax.swing.JLabel fieldForgotLabel;
    private javax.swing.JButton finalBookingButton;
    private javax.swing.JButton flightSearchButton;
    private javax.swing.JPanel flightsPanel;
    private javax.swing.JCheckBox freewifiCheckBox;
    private javax.swing.JComboBox<String> fromFlightComboBox;
    private javax.swing.JCheckBox gymCheckBox;
    private javax.swing.JCheckBox handicapCheckbox;
    private javax.swing.JTable hotelResultTable;
    private javax.swing.JButton hotelSearchButton;
    private javax.swing.JPanel hotelsPanel;
    private javax.swing.JLabel jArrFlightMessageLabel;
    private javax.swing.JLabel jArrFlightMessageLabel1;
    private javax.swing.JTable jArrFlightResultTable;
    private javax.swing.JLabel jArrTableLabel;
    private javax.swing.JLabel jBookDayTourGreenMessageLabel;
    private javax.swing.JLabel jBookDayTourMessageLabel;
    private javax.swing.JLabel jDepFlightMessageLabel;
    private javax.swing.JScrollPane jDepFlightTableScrollPane;
    private javax.swing.JLabel jDepTableLabel;
    private javax.swing.JLabel jHotelTableMessageLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTable jdepFlightResultTable;
    private javax.swing.JComboBox<String> languageCombobox;
    private javax.swing.JComboBox<String> locationHotelComboBox;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JButton nextFromCustomerButton;
    private javax.swing.JButton nextFromDayTourButton;
    private javax.swing.JButton nextFromFlightButton;
    private javax.swing.JButton nextFromHotelButton;
    private javax.swing.JComboBox<String> numberOfTicketsComboBox;
    private javax.swing.JCheckBox oneWayCheckBox;
    private javax.swing.JCheckBox pickupCheckBox;
    private javax.swing.JComboBox<String> roomHotelComboBox;
    private javax.swing.JComboBox<String> roomType;
    private javax.swing.JCheckBox smokeCheckBox;
    private javax.swing.JCheckBox spoolCheckBox;
    private javax.swing.JComboBox<String> ticketsTourComboBox;
    private javax.swing.JComboBox<String> toFlightComboBox;
    private javax.swing.JCheckBox tvCheckBox;
    private javax.swing.JComboBox<String> typeTourComboBox;
    private javax.swing.JCheckBox wifiCheckBox1;
    // End of variables declaration//GEN-END:variables
    
    private void init() {
        jdepFlightResultTable.getColumnModel().getColumn(0).setMinWidth(0);
        jdepFlightResultTable.getColumnModel().getColumn(0).setMaxWidth(0);
        jArrFlightResultTable.getColumnModel().getColumn(0).setMinWidth(0);
        jArrFlightResultTable.getColumnModel().getColumn(0).setMaxWidth(0);
        
        hotelResultTable.getColumnModel().getColumn(0).setMinWidth(0);
        hotelResultTable.getColumnModel().getColumn(0).setMaxWidth(0);
        
        dayTourResultsTable.getColumnModel().getColumn(0).setMinWidth(0);
        dayTourResultsTable.getColumnModel().getColumn(0).setMaxWidth(0);
        
        depFlightDatePicker.setDate(new Date());
        depFlightDatePicker.getMonthView().setLowerBound(new Date());
        arrFlightDatePicker.setDate(new Date());
        
        checkinHotelDatePicker.setDate(new Date());
        checkinHotelDatePicker.getMonthView().setLowerBound(new Date());
        checkoutHotelDatePicker.setDate(new Date());
        
        
        dayTourDatePicker.setDate(new Date());
        dayTourDatePicker.getMonthView().setLowerBound(new Date());
        
        //Svo ekki sé hægt að draga/hreyfa dálkana í jTable og fokka up töflunum 
        dayTourResultsTable.getTableHeader().setReorderingAllowed(false);
        hotelResultTable.getTableHeader().setReorderingAllowed(false);
        jdepFlightResultTable.getTableHeader().setReorderingAllowed(false);
        jArrFlightResultTable.getTableHeader().setReorderingAllowed(false);
        
        //Svo ekki sé hægt að skrifa inní bókunina í lokin
        jTextArea1.setEditable(false);
        
        fromFlightComboBox.setSelectedIndex(1);
        
        mainTabbedPane.setEnabledAt(4, false);
        
        mainTabbedPane.setIconAt(4, new javax.swing.ImageIcon("cart.png"));
        
        hideLabels();
          
    }
    /**
     * Increase the book number in the tap booking.
     * @param i is the number of booking that has been done.
     */
    private void increaseBookNumber (int i){
        numberOfbooking += i; 
        mainTabbedPane.setTitleAt(4, "Booking  "+ numberOfbooking);
    }
    
    /**
     * Creates row(s) with flight results from current search 
     * @param x is the flight results
     * @param table that the results are added to
     */
    private void createFlightTable(ArrayList<Flight> x, JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        if(x==null) return;
        
        for(int i=0; i<x.size(); i++){
            if(x.get(i)==null){return;}
            model.addRow(toObj(x.get(i),i));
        }
    }
    
    /**
     * Enables or disables arrival date picker and hides arrival table and
     * the arrival label for the table
     */
    private void oneWay(){
        if(oneWayCheckBox.isSelected()){
            arrFlightDatePicker.setEnabled(false);         
            jDepFlightTableScrollPane.setVisible(false);
            jArrTableLabel.setVisible(false);
            jArrFlightMessageLabel.setText("");        
            
        }
        else{
            arrFlightDatePicker.setEnabled(true);
            jDepFlightTableScrollPane.setVisible(true);
            jArrTableLabel.setVisible(true);
        }
    }
    
    /**
     * Checks if one or more rows in table are selected
     * @param table
     * @param count nr of columns
     * @return true if row(s) are selected
     */
    private boolean isRowSelected (JTable table){
        for (int i = 0; i < table.getRowCount(); i++) {
            boolean isChecked = (Boolean) table.getValueAt(i, table.getColumnCount()-1);
            if (isChecked) return true;
        }
        return false;
    }
    
    
    /**
     * Checks if flight is selected and adds the selected flight 
     * to bookings and enables booking tab if disabled 
     * 
     * @param table that has the selected flight
     * @param results from current search
     */
    private void addSelectedFlights(JTable table, FlightSearch result) {
        for (int i = 0; i < table.getRowCount(); i++) {
            boolean isChecked = (Boolean) table.getValueAt(i, table.getColumnCount()-1);

            if (isChecked) {
                int index = (int) table.getValueAt(i, 0);
                Flight tmp = result.getFlight(index);
                bookingManager.addFlight(tmp);       
            }

        }
        mainTabbedPane.setEnabledAt(4, true);
    }
    
    /**
     * Displays panel
     * @param panel to display
     */
    private void showPanel(JPanel panel){
        mainTabbedPane.setSelectedComponent(panel);
    }
    
    /**
     * Creates row(s) with hotel results from current search
     * @param x is the hotel results
     * @param table that the results are added to
     */
    private void createHotelTable(ArrayList<Hotel> x){
        DefaultTableModel model = (DefaultTableModel) hotelResultTable.getModel();
        model.setRowCount(0);
        if(x==null) return;
        
        for(int i=0; i<x.size(); i++){  
            if(x.get(i)==null){return;}
            model.addRow(hToObj(x.get(i),i));
        }
    }
    
    /**
     * Checks if hotel is selected and adds the selected hotel
     * to bookingManager and enables booking tab if disabled 
     * booking tab if disabled
     */
    private void addSelectedHotel(JTable table, HotelSearch result) {
        for (int i = 0; i < table.getRowCount(); i++) {
            boolean isChecked = (Boolean) table.getValueAt(i, table.getColumnCount()-1);

            if (isChecked) {
                int index = (int) table.getValueAt(i, 0);
                Hotel tmp = result.getHotel(index);
                bookingManager.addHotel(tmp);
            }

        }
        mainTabbedPane.setEnabledAt(4, true);
    }
    
    /**
     * Creates row(s) with day tour results from current search
     * @param x is the day tour results
     * 
     */
    private void createDayTourTable(ArrayList<Tours> x){
        DefaultTableModel model = (DefaultTableModel) dayTourResultsTable.getModel();
        model.setRowCount(0);
        if(x==null) return;
        
        for(int i=0; i<x.size(); i++){
            
            if(x.get(i)==null){return;}
            model.addRow(dToObj(x.get(i),i));
        }
    }
    
    /**
     * Checks if day tour is selected and adds the selected tour
     * to bookingManager and enables booking tab if disabled 
     * booking tab if disabled  
     */
    private void addSelectedDayTours(JTable table, DayTourSearch result ) {
        for (int i = 0; i < table.getRowCount(); i++) {
            boolean isChecked = (Boolean) table.getValueAt(i, table.getColumnCount()-1);

            if (isChecked) {
                int index = (int) table.getValueAt(i, 0);
                Tours tmp = result.getDayTour(index);
                bookingManager.addDayTour(tmp);
            }

        }
        mainTabbedPane.setEnabledAt(4, true);
    }
    
    /**
     * Adds customer to booking
     */
    
    private void addCustomer(){
        String name = jTextField1.getText().trim();
        String ssn = jTextField2.getText().trim();
        String phone = jTextField3.getText().trim();
        if(!validateCustomer(name,ssn,phone)) return;
        
        bookingManager.updateCustomer(name, ssn, toInt(phone));
        showPanel(bookPanel);
    }
    /**
     * Checks if name, ssn and phone from user is valid and displays 
     * (invalid) message if not.
     * @param name
     * @param ssn
     * @param phone
     * @return true if all parameters are valid
     */
    private boolean validateCustomer(String name, String ssn, String phone){
        boolean b = true;
        hideLabels();
        if(!validate.name(name)){
            jLabel20.setVisible(true);
            b=false;
        }
        if(!validate.ssn(ssn)){
            jLabel21.setVisible(true);
            b=false;
        }
        if(!validate.phone(phone)){
            jLabel22.setVisible(true);
            b=false;
        }
        return b;
    }
    
    /**
     * Displays customer information, flight(s), hotel and day tours that user 
     * has added to booking dispays it in textarea in the booking tab.
     */
    private void showBooking(){
        Booking booking = bookingManager.getBookings();
        
        String name = booking.customer.getName();
        String ssn = booking.customer.getSsn();
        String phone = booking.customer.getPhone()==0 ? "" : ""+booking.customer.getPhone();
        
        String s="";
        s+="Name: "+name+"\n"+"SSN: "+ssn+"\n"+"Phone: "+phone+"\n\n";
        
        ArrayList<Flight> fb = booking.flight;
        for(int i=0; i<fb.size(); i++){
            if(i==0){
                s+="Flights\n\n";
                s+="Airl\tFlight\tDepartur\tTime\tDate\tArrival\tTime\tDuration\tMax Luggage\tFood\tPassengers\tPrice\n";
                s+="----------\t-----------\t----------\t----------\t---------\t---------\t---------\t---------\t---------\t---------\t---------\t---------\n";
            }
            Flight y = fb.get(i);
            s+= y.getAirline()+"\t"+y.getFlightNumber()+"\t"+
                y.getDepartureLocation()+"\t"+y.getDepartureTime()+
                "\t "+y.getDepartureDate()+"\t"+y.getArrivalLocation()+
                "\t"+y.getArrivalTime()+"\t"+y.getDuration()+"\t"+
                y.getMaximumLuggageWeight()+"\t"+y.getFoodInfo()+
                "\t"+y.getNumberOfPassengers()+"\t"+y.getTotalPrice()+"\n";
        }
        
        ArrayList<Hotel> hb = booking.hotel;
        for(int i=0; i<hb.size(); i++){
            if(i==0){
                s+="\n\nHotel\n\n";
                s+="Name\tAddress\tPostCode\tCity\tWifi\tFree Wifi\tSmoke\tS.Pool\tGym\tTv\tPrice\n";
                s+="----------\t-----------\t----------\t----------\t----------\t-----------\t----------\t----------\t----------\t-----------\t----------\n";
                }
            Hotel y = hb.get(i);
            s+= y.getName()+"\t"+y.getAddress()+"\t"+y.getPostcode()+"\t"+
                y.getCity()+"\t"+conIntToString(y.getWifi())+"\t"+conIntToString(y.getFreeWifi())+"\t"+
                conIntToString(y.getSmoke())+"\t"+conIntToString(y.getPool())+"\t"+conIntToString(y.getGym())+"\t"+
                conIntToString(y.getTV())+"\t"+(y.getOrderPriceRoomType1(Integer.parseInt(adultsHotelComboBox.getSelectedItem().toString()),
                Integer.parseInt(roomHotelComboBox.getSelectedItem().toString()))+" ISK").replaceAll("([0-9])(?=(?:[0-9]{3})+\\b)", "$1.")+"\n";
        }
        
        ArrayList<Tours> db = booking.daytour;
        for(int i=0; i<db.size(); i++){
            if(i==0){
                s+="\n\nDay Tours\n\n";
                s+="Date\tType\tDuration\tDifficulty\tLanguage\tArea\tHandicap\tPickup\tPrice\n";
                s+="----------\t-----------\t----------\t----------\t----------\t----------\t----------\t---------\t---------\n";
            }
           Tours y = db.get(i);
            s+= y.getDate()+"\t"+ y.getType()+"\t"+y.getDuration()+"\t"+y.getDifficulty()+"\t"+
                lts(y.getLanguage())+"\t"+y.getArea()+"\t"+
                conFalseTrueToYesNO(y.getHandicap())+"\t"+
                conFalseTrueToYesNO(y.getPickup())+"\t"+y.getPrice()+"\n";
        }
            
        
        jTextArea1.setText(s);
    };
    

    
    /**
     * Adds booking to booking database
     */    
    private void addBookingToDatabase(){
        Booking booking = bookingManager.getBookings();
        ArrayList<Flight> flights = booking.flight;
        ArrayList<Hotel> hotel = booking.hotel;
        ArrayList<Tours> daytours = booking.daytour;
        
        if((booking.customer.getName()).equals("") || (booking.customer.getSsn()).equals("")
           || booking.customer.getPhone() == 0){
            fieldForgotLabel.setVisible(true);
            mainTabbedPane.setEnabledAt(3,true);
            mainTabbedPane.setEnabledAt(4,true);
            finalBookingButton.setEnabled(true);
            clearBookingMessage();
            showPanel(customerPanel);
            
            return;
        }
        
        for(int i=0; i<flights.size(); i++){
            bookingDatabase.addBooking(booking.customer, "Flight", flights.get(i).getID());
        }
        
        for(int i=0; i<hotel.size();i++){
            bookingDatabase.addBooking(booking.customer, "Hotel", hotel.get(i).getID());
        }
        for(int i=0; i<daytours.size(); i++){

            bookingDatabase.addBooking(booking.customer, "DayTours", daytours.get(i).getId());
        }

    };
    /**
     * Responsible for updating databases of flight.
     */
    private void updateFlightDatabase(){
        Booking booking = bookingManager.getBookings();
        ArrayList<Flight> flights = booking.flight;
        for(int i=0; i<flights.size(); i++){
            flightSearch.updateDatabase(flights.get(i).getNumberOfPassengers(), 
                 flights.get(i).getTicketsAvailable(), flights.get(i).getID());
        }
    };
    /**
     * Responsible for updating databases of day tour.
     */
    private void updateToursDatabase(){
        Booking booking = bookingManager.getBookings();
        ArrayList<Tours> tours = booking.daytour;
        for(int i=0; i<tours.size(); i++){
            int tickets = Integer.parseInt(ticketsTourComboBox.getItemAt(ticketsTourComboBox.getSelectedIndex())); 
            dayTourSearch.updateDatabase(tours.get(i).getId(),tickets);
        }
    };
    /**
     * Responsible for updating databases of hotel.
     */
     private void updateHotelDatabase(){
        Booking booking = bookingManager.getBookings();
        ArrayList<Hotel> hotels = booking.hotel;
        for(int i=0; i<hotels.size(); i++){
            //(int hotelID, int reservationID, String datein, String dateout,int nrOfRooms,String clientid,String client_passw, int roomType)
            int rooms = Integer.parseInt(roomHotelComboBox.getItemAt(roomHotelComboBox.getSelectedIndex())); 
            
            hotelSearch.updateDatabase(hotels.get(i).getID(),0,checkinHotelDatePicker.getDate()
                    ,checkoutHotelDatePicker.getDate(),rooms,"","",1);
        }
    };

    /**
     * Hides customer invalid message
     */
    private void hideLabels(){
        jLabel20.setVisible(false);
        jLabel21.setVisible(false);
        jLabel22.setVisible(false);
        fieldForgotLabel.setVisible(false);
    }
    
    /**
     * Checks if user has selected a departure date and arrival date (if one way 
     * is not checked) in flight tab.
     * @return true if date is selected
     */    
    private boolean validateFlights(){
        DefaultTableModel model = (DefaultTableModel) jdepFlightResultTable.getModel();
        model.setRowCount(0);
        model = (DefaultTableModel) jArrFlightResultTable.getModel();
        model.setRowCount(0);
        
        clearFlightMessages();
        
        if(depFlightDatePicker.getDate() == null) {
            jDepFlightMessageLabel.setText("Choose date");
            return false;
        }
        
        if(arrFlightDatePicker.getDate() == null && !oneWayCheckBox.isSelected()) {
            jArrFlightMessageLabel.setText("Choose date or One Way");
            return false;
        }
        
        return true;    
    }
    
    /**
     * Checks if user has selected a check in date and check out date in hotel tab.
     * @return true if date is selected
     */  
    private boolean validateHotels(){
        DefaultTableModel model = (DefaultTableModel) hotelResultTable.getModel();
        model.setRowCount(0);
        
        clearHotelMessages();
        
        if(checkinHotelDatePicker.getDate() == null && checkoutHotelDatePicker.getDate() == null){
            jHotelTableMessageLabel.setText("Choose date for check in and check out");
            return false;
        }
        if(checkinHotelDatePicker.getDate() == null && checkoutHotelDatePicker.getDate() != null){
            jHotelTableMessageLabel.setText("Choose date for check in");
            return false;
        }
        if(checkinHotelDatePicker.getDate() != null && checkoutHotelDatePicker.getDate() == null){
            jHotelTableMessageLabel.setText("Choose date for check out");
            return false;
        }
        return true;
    }
    
    /**
     * Clears messages to user in flight tab
     */
    
    public void clearFlightMessages(){
        bookFlightButtonGreenMessageLabel.setText("");
        bookFlightButtonMessageLabel.setText("");
        jDepFlightMessageLabel.setText("");
        jArrFlightMessageLabel.setText("");
    }
    
    /**
     * Clears messages to user in day tour tab
     */
    public void clearDayTourMessages(){
        jArrFlightMessageLabel1.setText("");
        jBookDayTourMessageLabel.setText("");
        jBookDayTourGreenMessageLabel.setText("");
    }
    
    /**
     * Clears messages to user in hotel tab
     */
    public void clearHotelMessages(){
        jHotelTableMessageLabel.setText("");
        bookHotelButtonMessageLabel.setText("");
        bookHotelButtonGreenMessageLabel.setText("");
    }
    /**
     * Clears messages to user in booking tab
     */
    public void clearBookingMessage(){
        bookingMessageLabel1.setText("");
    }
        
    //------------------- Help Functions ------------------------------
    private Object[] toObj(Flight x,int i){
        return new Object[]{i,x.getAirline(),x.getDepartureLocation(),x.getDepartureTime(),
                x.getArrivalLocation(),x.getArrivalTime(),x.getDuration()+" hours",
                x.getNumberOfPassengers(),x.getTotalPrice()+" ISK",false};
    }
     
    private Object[] hToObj(Hotel x, int i){
        String r;
        if("1".equals(roomType.getSelectedItem().toString()))
            r=x.getOrderPriceRoomType1(Integer.parseInt(adultsHotelComboBox.getSelectedItem().toString()),
            Integer.parseInt(roomHotelComboBox.getSelectedItem().toString()))+" ISK";
        else if("2".equals(roomType.getSelectedItem().toString()))
            r=x.getOrderPriceRoomType2(Integer.parseInt(adultsHotelComboBox.getSelectedItem().toString()),
            Integer.parseInt(roomHotelComboBox.getSelectedItem().toString()))+" ISK";
        else
            r=x.getOrderPriceRoomType3(Integer.parseInt(adultsHotelComboBox.getSelectedItem().toString()),
            Integer.parseInt(roomHotelComboBox.getSelectedItem().toString()))+" ISK";
        
        return new Object[]{i,x.getName(), x.getAddress(), x.getPostcode(), 
            x.getCity(), conIntToString(x.getWifi()), conIntToString(x.getFreeWifi()), 
            conIntToString(x.getSmoke()), conIntToString(x.getPool()), conIntToString(x.getGym()), 
            conIntToString(x.getTV()),r.replaceAll("([0-9])(?=(?:[0-9]{3})+\\b)", "$1."), false};

    }
    
    private Object[] dToObj(Tours x, int i){
        return new Object[]{i,x.getArea(),x.getType(),x.getDuration()+" hours",
            lts(x.getLanguage()),x.getDifficulty(), 
            conFalseTrueToYesNO(x.getPickup()), 
            conFalseTrueToYesNO(x.getHandicap()), ticketsTourComboBox.getSelectedItem().toString(), 
            (x.getPrice()+" ISK").replaceAll("([0-9])(?=(?:[0-9]{3})+\\b)", "$1."),false};
    }
   
    private String conFalseTrueToYesNO(boolean x){
        return x==true ? "Yes" : "No";
    }
    
    private String conIntToString(int x){
        return x==1 ? "Yes" : "No";
    }
    
    private int toInt(String s){
        return Integer.parseInt(s.replaceAll("[- ]", ""));
    }
    
    private String lts(String[] x){
        Map<String,String> lang = new HashMap<String, String>(){
            {
                put("English", "EN");
                put("Icelandic", "IS");
                put("Danish", "DK");
                put("Spanish", "ES");
                put("German", "DE");
            }
        };

        String y="";
        for(int i=0; i<x.length; i++){
            y+=" "+lang.get(x[i]);
        }

        return y.trim();
    }
    
     public int daysBetween(Date d1, Date d2){
             return (int)( (d2.getTime() - d1.getTime()) / (1000 * 60 * 60 * 24));
     }
    //----------------------------------------------------------------
        
}
